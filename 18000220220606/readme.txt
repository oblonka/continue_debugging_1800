
******************2021.12********************************************************************************************************************************************************************
1.原理图评审，修改，原理图加调试接口与锂电池的端子
2.电源树加wifi ，tft背光电源供电，修改调试跳接电阻
3.电源开关mos根据这个封装的话，是对的，是从源集输入，漏集输出
4.CO2不用电源的转接的转换，内部的通信接口使用的是3.3V的电源，与单片机的接口的3.0V的电平是兼容的。
5.硬件改版 ESP32S   BT WIFI 双模单频    主WIFI   
6.记录硬件的问题：焊接发现一处  AM1117电源那里有短路    后续改版修改




*****************2022.01**********************************************************************************************************************************************************************

1.增加调试串口6   调试dayinlog接口
2.增加串口2       wifi代码添加整合     串口测试
3.增加串口1       CO2代码添加
4.移植emwin 5.26   显示基本的控件
5.ESP32S测试烧录的AT固件     测试wifi    连接微软azure 成功    阿里云     
6.TFT fsmc驱动代码

7.触摸屏驱动测试      裸机测试
8.触摸屏驱动移植到emwin里面   
9.SD卡读写测试     读取图片
10.png图片的解析与读取    libpng     pnglibz

11.SD卡读写测试   emwin的内存与读取测试   png图片尺寸35*35以下显示     解析占用ram很大



****************2022.02************************************************************************************************************************************************************************

1.微软的azure  IOT的测试账号申请      测试成功
2.国际版的azure申请与测试             申请成功
3.中国版的azure的申请与测试           
4.azure  iot的流程了解
5.移植emwin 5.26   显示基本的控件
6.TFT fsmc驱动代码   修改
7.wifi  ESP32S的wifi处理        


*****************2022.03************************************************************************************************************************************************************************

1.emwin  界面生成与测试     主界面     控件
2.温湿度传感器代码整合到主界面   
3.RTC时钟代码整合到代码里面测试
4.CO2代码整合到里未测试
5.熟悉emwin 的内存优化与实现界面的控件   设计思路 与 设计方法




*****************2022.04************************************************************************************************************************************************************************

1.wifi 连接界面生成与测试
2.键盘的界面生成与测试    单独的3个界面  测试
3.界面加载与切换的问题    减少控件  优化内存测试
4.熟悉emwin 的内存优化与实现界面的控件   设计思路 与 设计方法



*****************2022.05************************************************************************************************************************************************************************

1.增加wifi接口串口的数组的大小长度   4096  
2.增加串口的字符串的解析，SSID的提取，正则表达式提取
3.提取的SSID目前，扫描出来的有不可见的wifi名的wifi，去除不可见的显示的wifi名的显示    测试与 串口打印  log输出
4.优化界面的设计，减少控件与内存的占用


*****************2022.06************************************************************************************************************************************************************************
1.增加wifi扫描列表的界面
2.增加按键的字符串的处理，大写，小写，数字，函数    共享一个大的数组

3.增加小写   大写  数字界面的返回按钮，加载代码超出，导致白屏    界面切换多，导致的动态内存增大的问题，优化emwin代码   

    (1) 切换的界面的处理机制    不用回调函数，调用函数用标志位替代 
    (2) emwin的内存优化，开存储与不开存储的区别 
    (3) CCM的64KB 的内存的使用问题，内存管理   
    (4) 目前是一个主界面  三个输入法界面  一个wifi列表的显示界面    
    (5) 将贴图的数组放到SD卡来读取，测试，减少内存的占用，编译可以，但是下载会白屏

4.扫描列表的函数，用全局的数组，直接将每个赋值到事件的中断函数里面。一页是10个
翻页的话，通过封装这10个事件函数

5.大写  小写  数字的按键的界面，这个可以合成一个界面
减少控件的使用和window的调用，减少内存的占用


CreateWindow_WIFIcon1(); //
CreateWindow_WIFIcon_top();//上面的wifi
CreateWindow_WIFIcon_bottom();//bottom
	
总体的调用函数里面只调用中间的部分，进行函数的封装。     切换的时候只是中间的键盘的部分在变，其余的部分界面不变化。


window的背景用2D绘图，直接不用window控件，减少内存

/* 使能多缓冲 */

WM_MULTIBUF_Enable(1);



***************2022.06.16************************************************************************************************************************************************************************
1.增加小写，大写，数字键盘的返回的处理代码，返回后直接进入的是wifi的扫描列表的界面。

2.增加小写，大写，数字键盘的确定的按钮，输入的字符串确定后，通过printf 打印log检查。
这个确定的字符是直接给AP 的连接的代码做处理的ESP32S_JoinAP(User_ESP32S_SSID, User_ESP32S_PWD); 
是单独的函数 	  MQTT  TCP 不同平台平台对接的必要的连接步骤	
	
3.后面要修改的是三个界面的   大写   小写   数字的中间部分切换，上和下的界面不动，只切换中间的部分
	
4.提取的SSID目前，扫描出来的有不可见的wifi名的wifi，去除不可见的显示的wifi名的显示	
	
5.重新设计界面，整合成一个界面，按键部分的变化只是按键上设置的字符的变化

按键上显示的图不用image的控件，直接使用gui api的函数来贴图，贴数组，这种不会影响触摸

	
	
	

*******************2022.06.21工作计划************************************************************************************************************************************************

1.	目的：
WIFI的整体的连接的界面，通过列表进入密码的输入的界面，连接指定的可用wifi。
2.	界面的设计思路，将输入的密码的3个界面集合成，通过一个界面进行，减少控件，减少内存的占用，只更换界面中按键的位置的设置的字符。

目前的正在改的解决方案是：重新只设计一个整合界面，移植代码调试，测试【2022.06.21-2022.06.22】   
将输密码的3个界面整合成一个，只通过按键的设置与获取字符变换进行大写，小写，数字的切换，控件不变，只是上面显示的字符在变，共用一套的按键控件，不同位置的按键控件只有几个，隐藏和转换显示，极大的减少控件，内存的占用。每次单独显示一个界面的时候不会出现卡顿，缩减为一个界面，切换时只在一个界面上完成切换，切换深度减少。
【前面的设计思路是是独立的三个界面，都是独立的控件，控件没有共享隐藏，控件多，占用内存大。】

3.	测试获取到的WIFI ssid字符与密码字符，连接测试MQTT服务器，测试。【2022.06.23】
4.	主界面加wifi图标的触摸，点击会切换到wifi的连接列表，测试。【2022.06.24】
5.	主界面>wifi列表界面>键盘界面>
	
6.按键的控件上贴图，是以按键的左上角为0.0	
	
50个Button会消耗8Kbytes
	
7.每个按键的下面写的是获取字符的函数，由特定的界面的按键的写入的字符确定。    写入什么就获取什么
	
切换的按钮下面，加标志位，判断标志位进行切换。
	
	
	
******************2022.06.24************************************************************************************************************************************************

1.修改  主界面为按键上贴图的方式      整体减少控件的使用         按键的贴图的部分，可以设置坐标的位置
2.修改按键的3个整合成1个的按键的界面 

	
        GUI_RECT RectSource = {0, 0, 10, 10};
        GUI_GetClientRect(&RectSource);
        GUI_DispStringInRect("Text", &RectSource, GUI_TA_HCENTER | GUI_TA_VCENTER);

        GUI_DispStringAt("Position 50,20", 50, 20); 	
	
	
	
	    GUI_SetColor(GUI_DARKGREEN);
        GUI_DrawRect(0, 0, 320, 38);//左上角    右下角
        GUI_FillRect(0, 0, 320, 38);
	
	
********************2022.06.27************************************************************************************************************************************************

1.将需要的wifi 的最上面的图标的数组，共用同一个数组，减少静态内存的消耗     

wifi列表界面   键盘的界面   主界面       共用一个图标
wifi列表返回的按键    键盘返回的按键     共用一个图标
	
2.主界面的优化   去掉上面的    一个window    和文本的控件两个     
3.棒子的设计     只需要白点移动就行    
4.主界面的三个主要的按钮


（1）锁屏界面
（2）传感器的参数曲线  3个
（3）设置的菜单栏   未定   
	
	
	
	
1、学符数组str[];

if(strlen(str)==0)  则该字符数组为空

2、判断：if (strcmp(buf,"")==0)
strcmp在"string.h"中，buf是你要判断的字符串	
	
	
	
本周的工作，计划完成目前的界面和传感器代码的集成整合。
2022.06.27
1.CO2数据读取，串口打印与显示。 
2.wifi列表显示全部ssid，翻页上下。
3.连接AP,点击哪一个就发送哪一个的ssid到连接函数的接口，然后输入password的字符到连接函数的接口。

	



42022年6月29日15:49:02
1.编译代码时的优化的问题。开优化会影响这个
	
	
	
2022.07.01	
1.CO2的接收的数据差一个的原因是，代码里面多了	//CO2_Fram_Record_Struct.Data_RX_BUF_CO2[CO2_Fram_Record_Struct.InfBit_CO2.FramLength_CO2] = '\0';
2.git的本地的仓库，建立，避免U盘忘记带的现象，本地和git同步进行
3.wifi列表单页显示，翻页有问题，内存不足的问题解决，内部的64kb CCM.  优化内存const     https://blog.csdn.net/qq_27747359/article/details/109085292
4.wifi的ssid的接口字符串，指针入口，按键上的ssid，点击哪个哪个就进入这个
5.wifi的网络时间的自校准，函数已写完，测试函数，时间与电脑上的时间比对测试
6.界面的切换的界面时，关闭和删除缓存的界面，一次只会显示一个界面。解决切换界面的卡顿的问题。

7.主界面的其他按键的界面，参数设置与校准的参数    张  界面的打包参考设计
8.调整贴图的位置，坐标修改。
9.显示CO2参数的颜色条这个，参数范围的设置与控制的函数，大白点的位置在slider的控件上的贴图，这个可以直接在背景上绘图。颜色条和大白点，不用slider的控件
10.PCB的更新


2022.07.05
1.所有的emWin例子全部采用三缓冲方式，不再使用窗口存储设备，因为窗口存储设备已经不能够发挥F429的性能。例子
2.开启3级优化，时间优化     开启MDK4.74最高的3级优化，同时开启相当给力的时间优化
3.GUI界面的快速刷新和切换方法。    通过end当前的界面的函数，或者删除当前的界面，减少emwin的动态内存，切换的卡顿与 界面卡死，释放占用的动态的内存。
4.我们要充分发挥RTOS的多任务特性和实时性，并特别注重框架设计。
5.显示emWin动态内存的剩余，总共是分配了12MB
6.内部的内部64KB CCM SRAM这个的内存能否分配到界面的使用上，和emwin的动态内存的分配上。
7.优化  剩下的界面的话图片需要的解析
8.主界面的控制的逻辑，就是下面的锁  曲线  设置的3个按钮的功能和整个串起来的操作的逻辑。


参考emwin的设计教程，界面的优化和切换

9.界面显示时的延时 问题解决 
10.界面的显示时的传感器的参数的显示的延时，

11.emwin的控件上同时显示这个大小写的数字显示的方法，目前是两个设置的两个文本。


12.用2D文本显示的话，那就是拼接的数字，通过坐标的显示 大小写的数字    直接通过按键上自带的字符显示

大写。小写       通过坐标显示这个数字


还有就是用的三缓冲方式还是存储设备方式。

用2D绘制的曲线。

https://www.armbbs.cn/forum.php?mod=viewthread&tid=111334&highlight=emWin


通过标志位进行按键的界面的切换的操作





eg:系统的架构：
（1）. os_idle_demon，      优先级0：系统空闲任务。
（2）. AppTaskStatistic       优先级1：CPU利用率检测。
（3）. AppTaskGUI，          优先级3：GUI主任务。
（4）. AppTaskTCPMain，  优先级4：TCPnet网络任务。
（5）. AppTaskUserIF，      优先级5：按键消息处理任务。
（6）. AppTaskMsgPro，   优先级6：主要用于截图任务。
（7）. AppTaskStart，        优先级7：启动任务。
（8）. AppTaskCAN，        优先级8：CAN总线任务。
（9）. AppTaskModbus，  优先级9：Modbus任务。
（10）. AppTaskUSB，          优先级10：USB任务，
（11）. AppTaskMusic，       优先级11：音乐任务，用于音乐播放器，视频播放器，录音机和收音机处理。
（12）. AppTaskPinDetect， 优先级12：SD卡插拔检测任务。
（13）. AppTaskTCPTimer， 优先级13：TCPnet网络定时更新任务。
  USB在运行的过程中会创建2两个任务
（14）. USBD_RTX_EndPoint0                   优先级2：USB设备端点0任务。
（15）. USBD_RTX_MSC_EP_BULK_Event  优先级2：USB BULK数据传输任务。


5.  15个中断安排
NVIC优先级分组采用4，仅抢占优先级，范围0-15。
LTDC中断，                抢占优先级 0
ETH以太网中断，        抢占优先级 0
USB FS中断，             抢占优先级 0
CAN2 TX中断，          抢占优先级 1
CAN2 RX0中断，        抢占优先级 1
DMA2_Steam5中断，抢占优先级 1
DMA2_Steam1中断，抢占优先级 1
EXTI6中断，               抢占优先级 1
USART3中断，           抢占优先级 2
EXTI2中断，               抢占优先级 2
TIM2中断，                抢占优先级 4
USART1中断，           抢占优先级 13
RTC Alarm中断，       抢占优先级 13
SVC中断，                  抢占优先级 14
Systick中断，             抢占优先级 15
PendSV中断，            抢占优先级 15


6.  内存安排
内部SRAM , CCM SRAM和SDRAM安排。
内部192KB SRAM       ：80KB用于动态内存分配，其余用于任务堆栈，系统堆栈，文件系统，网络协议栈等。
内部64KB CCM SRAM：用于视频播放器时，JPEG解码。
外部16MB SDRAM     ：前4MB用于TFT显存。
外部16MB SDRAM     ：后12MB用于emWin动态内存。



*******************2021.12       TFT_LCD   16bits ************************************************************************************************************* ************************   
备用外部SRAM更换方案：IS62WV51216换成XM8A51216V33
程序增加部分：
1.sram.c引用 #include "XMRAM.h"	
2.在FSMC_SRAM_Init初始化增加函数：   XmRamInit(); 
3、添加XMRAM.lib库
